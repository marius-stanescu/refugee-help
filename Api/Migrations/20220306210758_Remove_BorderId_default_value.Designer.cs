// <auto-generated />
using System;
using BlazorApp.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BlazorApp.Api.Migrations
{
    [DbContext(typeof(RefugeesDbContext))]
    [Migration("20220306210758_Remove_BorderId_default_value")]
    partial class Remove_BorderId_default_value
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BlazorApp.Api.Domain.Border", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Border");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Vama Sighetu Marmației/Solotvino",
                            NormalizedName = "VAMA_SIGHETU_MARMATIEI_SOLOTVINO"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Vama Vicșani/Vadu Siret",
                            NormalizedName = "VAMA_VICSANI_VADU_SIRET"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Vama Isaccea/Orlovka",
                            NormalizedName = "VAMA_ISACCEA_ORLOVKA"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Vama Tulcea/Ismail",
                            NormalizedName = "VAMA_TULCEA_ISMAIL"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Vama Câmpulung la Tisa/Teresova",
                            NormalizedName = "VAMA_CAMPULUNG_LA_TISA_TERESOVA"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Vama Sculeni",
                            NormalizedName = "VAMA_SCULENI"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Vama Stânca/Costești",
                            NormalizedName = "VAMA_STANCA_COSTESTI"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Vama Albița/Leușeni",
                            NormalizedName = "VAMA_ALBITA_LEUSENI"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Vama Galați/Giurgiulești",
                            NormalizedName = "VAMA_GALATI_GIURGIULESTI"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Vama Fălciu/Stoianovca",
                            NormalizedName = "VAMA_FALCIU_STOIANOVCA"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Vama Nicolina/Ungheni",
                            NormalizedName = "VAMA_NICOLINA_UNGHENI"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Vama Oancea/Cahul",
                            NormalizedName = "VAMA_OANCEA_CAHUL"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Vama Bechet/Rahova (Orjahovo)",
                            NormalizedName = "VAMA_BECHET_RAHOVA_ORJAHOVO_"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Vama Borș/Ártánd",
                            NormalizedName = "VAMA_BORS_ÁRTÁND"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Vama Calafat/Vidin",
                            NormalizedName = "VAMA_CALAFAT_VIDIN"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Vama Călărași/Silistra",
                            NormalizedName = "VAMA_CALARASI_SILISTRA"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Vama Capul Midia",
                            NormalizedName = "VAMA_CAPUL_MIDIA"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Vama Carei/Vallaj",
                            NormalizedName = "VAMA_CAREI_VALLAJ"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Vama Cenad/Kiszombor",
                            NormalizedName = "VAMA_CENAD_KISZOMBOR"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Vama Corabia/Măgura",
                            NormalizedName = "VAMA_CORABIA_MAGURA"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Vama Curtici/Lőkösháza",
                            NormalizedName = "VAMA_CURTICI_LŐKÖSHÁZA"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Vama Episcopia Bihor/Biharkeresztes",
                            NormalizedName = "VAMA_EPISCOPIA_BIHOR_BIHARKERESZTES"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Vama Giurgiu/Ruse",
                            NormalizedName = "VAMA_GIURGIU_RUSE"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Vama Jimbolia/Kikinda Crinja",
                            NormalizedName = "VAMA_JIMBOLIA_KIKINDA_CRINJA"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Vama Lipnița/Kainargea",
                            NormalizedName = "VAMA_LIPNITA_KAINARGEA"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Vama Constanța",
                            NormalizedName = "VAMA_CONSTANTA"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Vama Mangalia",
                            NormalizedName = "VAMA_MANGALIA"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Vama Sulina",
                            NormalizedName = "VAMA_SULINA"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Vama Brăila",
                            NormalizedName = "VAMA_BRAILA"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Vama Cernavodă",
                            NormalizedName = "VAMA_CERNAVODA"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Vama Drobeta Turnu Severin",
                            NormalizedName = "VAMA_DROBETA_TURNU_SEVERIN"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Vama Moldova Veche/Gerdap",
                            NormalizedName = "VAMA_MOLDOVA_VECHE_GERDAP"
                        },
                        new
                        {
                            Id = 34,
                            Name = "Vama Naidăș/Kalugerovo",
                            NormalizedName = "VAMA_NAIDAS_KALUGEROVO"
                        },
                        new
                        {
                            Id = 35,
                            Name = "Vama Nădlac/Nagylak",
                            NormalizedName = "VAMA_NADLAC_NAGYLAK"
                        },
                        new
                        {
                            Id = 36,
                            Name = "Vama Oltenița/Turtucaia (Tutrakan)",
                            NormalizedName = "VAMA_OLTENITA_TURTUCAIA_TUTRAKAN_"
                        },
                        new
                        {
                            Id = 37,
                            Name = "Vama Orșova",
                            NormalizedName = "VAMA_ORSOVA"
                        },
                        new
                        {
                            Id = 38,
                            Name = "Vama Ostrov/Silistra",
                            NormalizedName = "VAMA_OSTROV_SILISTRA"
                        },
                        new
                        {
                            Id = 39,
                            Name = "Vama Petea/Csengersima",
                            NormalizedName = "VAMA_PETEA_CSENGERSIMA"
                        },
                        new
                        {
                            Id = 40,
                            Name = "Vama Porțile de Fier I/Djerdap I",
                            NormalizedName = "VAMA_PORTILE_DE_FIER_I_DJERDAP_I"
                        },
                        new
                        {
                            Id = 41,
                            Name = "Vama Porțile de Fier II/Punctul Djerdap II",
                            NormalizedName = "VAMA_PORTILE_DE_FIER_II_PUNCTUL_DJERDAP_II"
                        },
                        new
                        {
                            Id = 42,
                            Name = "Vama Salonta/Méhkerék",
                            NormalizedName = "VAMA_SALONTA_MÉHKERÉK"
                        },
                        new
                        {
                            Id = 43,
                            Name = "Vama Săcuieni/Letavertes",
                            NormalizedName = "VAMA_SACUIENI_LETAVERTES"
                        },
                        new
                        {
                            Id = 44,
                            Name = "Vama Stamora-Moravița/Varsac Vatin",
                            NormalizedName = "VAMA_STAMORA_MORAVITA_VARSAC_VATIN"
                        },
                        new
                        {
                            Id = 45,
                            Name = "Vama Turnu/Battonya",
                            NormalizedName = "VAMA_TURNU_BATTONYA"
                        },
                        new
                        {
                            Id = 46,
                            Name = "Vama Turnu Măgurele/Nicopole",
                            NormalizedName = "VAMA_TURNU_MAGURELE_NICOPOLE"
                        },
                        new
                        {
                            Id = 47,
                            Name = "Vama Urziceni/Vallaj",
                            NormalizedName = "VAMA_URZICENI_VALLAJ"
                        },
                        new
                        {
                            Id = 48,
                            Name = "Vama Valea lui Mihai/Nyírábrány",
                            NormalizedName = "VAMA_VALEA_LUI_MIHAI_NYÍRÁBRÁNY"
                        },
                        new
                        {
                            Id = 49,
                            Name = "Vama Vama Veche/Durankulak",
                            NormalizedName = "VAMA_VAMA_VECHE_DURANKULAK"
                        },
                        new
                        {
                            Id = 50,
                            Name = "Vama Vărșand/Gyula",
                            NormalizedName = "VAMA_VARSAND_GYULA"
                        },
                        new
                        {
                            Id = 51,
                            Name = "Vama Vladimirescu/Lőkösháza",
                            NormalizedName = "VAMA_VLADIMIRESCU_LŐKÖSHÁZA"
                        },
                        new
                        {
                            Id = 52,
                            Name = "Vama Zimnicea/Sviștov",
                            NormalizedName = "VAMA_ZIMNICEA_SVISTOV"
                        });
                });

            modelBuilder.Entity("BlazorApp.Api.Domain.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Population")
                        .HasColumnType("int");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("BlazorApp.Api.Domain.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("BlazorApp.Api.Domain.Shelter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AdultCapacity")
                        .HasColumnType("int");

                    b.Property<bool>("AllowsPets")
                        .HasColumnType("bit");

                    b.Property<int>("ChildrenCapacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeactivatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeactivationReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MaxPeriodInDays")
                        .HasColumnType("int");

                    b.Property<int>("Period")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(10);

                    b.HasKey("Id");

                    b.ToTable("Shelter");
                });

            modelBuilder.Entity("BlazorApp.Api.Domain.Transport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AdultCapacity")
                        .HasColumnType("int")
                        .HasColumnName("AdultSeats");

                    b.Property<int>("BorderId")
                        .HasColumnType("int");

                    b.Property<int>("ChildrenCapacity")
                        .HasColumnType("int")
                        .HasColumnName("ChildSeats");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeactivatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeactivationReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpiresOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BorderId");

                    b.ToTable("Transport");
                });

            modelBuilder.Entity("BlazorApp.Api.Domain.City", b =>
                {
                    b.HasOne("BlazorApp.Api.Domain.Region", "Region")
                        .WithMany("Cities")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("BlazorApp.Api.Domain.Shelter", b =>
                {
                    b.OwnsOne("BlazorApp.Api.Domain.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("ShelterId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("CityId")
                                .HasColumnType("int");

                            b1.Property<int>("RegionId")
                                .HasColumnType("int");

                            b1.HasKey("ShelterId");

                            b1.HasIndex("CityId");

                            b1.HasIndex("RegionId");

                            b1.ToTable("Shelter");

                            b1.HasOne("BlazorApp.Api.Domain.City", "City")
                                .WithMany()
                                .HasForeignKey("CityId")
                                .OnDelete(DeleteBehavior.NoAction)
                                .IsRequired();

                            b1.HasOne("BlazorApp.Api.Domain.Region", "Region")
                                .WithMany()
                                .HasForeignKey("RegionId")
                                .OnDelete(DeleteBehavior.NoAction)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("ShelterId");

                            b1.Navigation("City");

                            b1.Navigation("Region");
                        });

                    b.OwnsOne("BlazorApp.Api.Domain.ContactPerson", "ContactPerson", b1 =>
                        {
                            b1.Property<Guid>("ShelterId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Phone")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ShelterId");

                            b1.ToTable("Shelter");

                            b1.WithOwner()
                                .HasForeignKey("ShelterId");
                        });

                    b.Navigation("Address");

                    b.Navigation("ContactPerson");
                });

            modelBuilder.Entity("BlazorApp.Api.Domain.Transport", b =>
                {
                    b.HasOne("BlazorApp.Api.Domain.Border", "Border")
                        .WithMany()
                        .HasForeignKey("BorderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("BlazorApp.Api.Domain.ContactPerson", "ContactPerson", b1 =>
                        {
                            b1.Property<Guid>("TransportId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Phone")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TransportId");

                            b1.ToTable("Transport");

                            b1.WithOwner()
                                .HasForeignKey("TransportId");
                        });

                    b.OwnsOne("BlazorApp.Api.Domain.Address", "Destination", b1 =>
                        {
                            b1.Property<Guid>("TransportId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("CityId")
                                .HasColumnType("int");

                            b1.Property<int>("RegionId")
                                .HasColumnType("int");

                            b1.HasKey("TransportId");

                            b1.HasIndex("CityId");

                            b1.HasIndex("RegionId");

                            b1.ToTable("Transport");

                            b1.HasOne("BlazorApp.Api.Domain.City", "City")
                                .WithMany()
                                .HasForeignKey("CityId")
                                .OnDelete(DeleteBehavior.NoAction)
                                .IsRequired();

                            b1.HasOne("BlazorApp.Api.Domain.Region", "Region")
                                .WithMany()
                                .HasForeignKey("RegionId")
                                .OnDelete(DeleteBehavior.NoAction)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("TransportId");

                            b1.Navigation("City");

                            b1.Navigation("Region");
                        });

                    b.Navigation("Border");

                    b.Navigation("ContactPerson");

                    b.Navigation("Destination");
                });

            modelBuilder.Entity("BlazorApp.Api.Domain.Region", b =>
                {
                    b.Navigation("Cities");
                });
#pragma warning restore 612, 618
        }
    }
}
