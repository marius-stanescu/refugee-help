@page "/search-offers"

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<PageTitle>Ghidează refugiați</PageTitle>

<div class="loader-wrapper" hidden="@(!requestStarted || requestCompleted)">
    <span class="loader"></span>
</div>

<MudPaper Class="mt-5 pa-4" hidden="@(requestStarted)">
    <h3>Ghidează un grup de refugiați</h3>
    <MudForm Model="@request" @ref="@form" @bind-Errors="@errors"
             Validation="@(requestValidator.ValidateValue)" ValidationDelay="0">

        <MudNumericField @bind-Value="request.NumberOfAdults" For="@(() => request.NumberOfAdults)"
                      Label="Nr. adulți" Class="mt-4" />
        <MudNumericField @bind-Value="request.NumberOfChildren" For="@(() => request.NumberOfChildren)"
                      Label="Nr. copii" Class="mt-4" />

        <div class="mt-6">
            <MudAutocomplete @bind-Value="request.StartingPoint" For="@(() => request.StartingPoint)"
                             ResetValueOnEmptyText="@true" CoerceText="@true" SearchFunc="SearchBorder" ToStringFunc="@(x => x.Name)"
                             Label="Loc de plecare" Class="mt-4" />
            <MudAutocomplete @bind-Value="request.Address.Region" For="@(() => request.Address.Region)"
                             ResetValueOnEmptyText="@true" CoerceText="@true" SearchFunc="SearchRegion" ToStringFunc="@(x => x.Name)"
                             Label="Destinație (județ)" Class="mt-4" />
            <MudAutocomplete @bind-Value="request.Address.City" For="@(() => request.Address.City)"
                             ResetValueOnEmptyText="@true" CoerceText="@true" SearchFunc="SearchCity" ToStringFunc=@(x => x.Name)
                             Label="Destinație (oraș)" Class="mt-4" Disabled=@(request.Address.Region.Id == 0) />
        </div>

        <div class="mt-6">
            <MudSwitch @bind-Checked="@request.Shelter.IsNeeded" For="@(() => request.Shelter.IsNeeded)"
                       Label="Nevoie de adăpost" Color="Color.Primary" />
            <div hidden="@(!request.Shelter.IsNeeded)">
                <MudSelect @bind-Value="request.Shelter.Period" For="@(() => request.Shelter.Period)"
                           Label="Perioadă" Class="mt-2">
                    @foreach (var timePeriod in timePeriods)
                    {
                        <MudSelectItem Value="@timePeriod">
                            @timePeriod.Text()
                        </MudSelectItem>
                    }
                </MudSelect>
                <MudSwitch @bind-Checked="@request.Shelter.AllowsPets" For="@(() => request.Shelter.AllowsPets)"
                           Label="Animale domestice" Color="Color.Success" Class="mt-4" />
            </div>
        </div>

        <div class="mt-10">
            <div class="mb-6">
                @foreach (var error in errors)
                {
                    <MudText Color="@Color.Error">@error</MudText>
                }
            </div>
            <div class="d-flex align-center justify-space-between mb-2">
                <MudButton Link="/" Variant="Variant.Outlined" Color="Color.Dark"
                           StartIcon="@Icons.Filled.ArrowBackIosNew" Class="mx-2">
                    Înapoi
                </MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true"
                           OnClick="@(async () => await Submit())">
                    Caută
                </MudButton>
            </div>
        </div>
    </MudForm>
</MudPaper>

@if (requestCompleted)
{
    <SearchResults Result="@searchResult" />
    <div class="mt-6 mb-6">
        <MudButton OnClick="@(() => { requestStarted = false; requestCompleted = false; })"
               Variant="Variant.Outlined" StartIcon="@Icons.Filled.ArrowBackIosNew">
            Înapoi
        </MudButton>
    </div>
}

@code {

    private string[] errors = { };
    private MudForm form = new MudForm();
    private SearchOffersRequest request = new SearchOffersRequest();
    private SearchOffersRequestValidator requestValidator = new SearchOffersRequestValidator();
    private IEnumerable<TimePeriod> timePeriods = new HashSet<TimePeriod>
    {
        TimePeriod.OneToThreeDays,
        TimePeriod.ThreeDaysToAWeek,
        TimePeriod.OneToTwoWeeks,
        TimePeriod.ThreeToFourWeeks,
        TimePeriod.OneToTwoMonths,
        TimePeriod.Indefinite,
    };

    private bool requestStarted = false;
    private bool requestCompleted = false;
    private SearchOffersResult searchResult = new SearchOffersResult();

    private Task<IEnumerable<BorderModel>> SearchBorder(string value)
    {
        return Task.FromResult(
            Cache.Borders.Where(b => b.NormalizedName.Contains(value.LookupNormalize())));
    }

    private Task<IEnumerable<RegionModel>> SearchRegion(string value)
    {
        return Task.FromResult(
            Cache.Regions.Where(r => r.NormalizedName.Contains(value.LookupNormalize())));
    }

    private Task<IEnumerable<CityModel>> SearchCity(string value)
    {
        return Task.FromResult(Cache.Cities
            .Where(c => c .RegionId == request.Address.Region.Id)
            .Where(r => r.NormalizedName.Contains(value.LookupNormalize())));
    }

    private async Task Submit()
    {
        await form.Validate();

        if (form.IsValid)
        {
            requestStarted = true;

            try
            {
                var response = await Http.PostAsJsonAsync("/api/SearchOffers", request);
                searchResult = (await response.Content.ReadFromJsonAsync<SearchOffersResult>()) ?? new SearchOffersResult();
            }
            catch
            {
                Snackbar.Add("A avut loc o eroare neașteptată.", Severity.Error);
            }

            requestCompleted = true;
        }
    }

}